%# load data
[ ServiceName, Region, Availability, Outages, DownTime ]  = ReadCloudDataSet();
Database=cell(186,5);

SLAavailability = zeros(length(Availability),1);
InitialTrust = zeros(length(Availability),1); % 1 for trustworthy and 0 for misbehaving

SLAavailability(:,:)=100;
for i=1:length(Availability)
    if(100-Availability(i)<0.2753)
       InitialTrust(i) = 1; 
    else
       InitialTrust(i) = 0;
    end
end

for db=1:size(Database,1) %Database matrix
    Database{db, 1}= ServiceName;
    Database{db, 2}= Region;
    Database{db, 3}= Availability;
    Database{db, 4}= Outages;
    Database{db, 6}= InitialTrust;
end

emptyCells = cellfun('isempty', Database); %get the empty rows in the database
cols = size(Database,2); %number of columns in the database
Database(emptyCells) = []; %remove the empty cells if any
Database = reshape(Database, [], cols); %reshape the database from vector to cell

[ServiceNameNumberic, gn1]                 = grp2idx(Database(:,1));     % transform the nominal class to numeric ('nature of MPR' => cooperative: 1 and malicious: 2)
[RegionNumeric, gn2]                 = grp2idx(Database(:,2));     % transform the nominal class to numeric ('nature of MPR' => cooperative: 1 and malicious: 2)

Database(:,1)=[]; %remove the 'nature of MPR' column from the database (to be able to convert it to matrix)
Database(:,2)=[]; %remove the 'nature of MPR' column from the database (to be able to convert it to matrix)
CloudData=cell2mat(Database); %convert the database from cell to matrix
CloudData=[ServiceNameNumberic CloudDatadata]; %append the 'nature of MPR' column with numeric values to the matrix

load carsmall

%# construct predicting attributes and target class
vars = {'MPG' 'Cylinders' 'Horsepower' 'Model_Year'};
x = [MPG Cylinders Horsepower Model_Year];  %# mixed continous/discrete data
y = cellstr(Origin);                        %# class labels
disp('data');
disp(y);
%# train classification decision tree
t = classregtree(x, y, 'method','classification', 'names',vars, ...
                'categorical',[2 4], 'prune','off');
view(t)

%# test
yPredicted = eval(t, x);
cm = confusionmat(y,yPredicted);           %# confusion matrix
N = sum(cm(:));
err = ( N-sum(diag(cm)) ) / N;             %# testing error

disp('test error');
disp(err);

%# prune tree to avoid overfitting
tt = prune(t, 'level',3);
view(tt)

%# predict a new unseen instance
t = fitctree(x, y, 'PredictorNames',vars, ...
    'CategoricalPredictors',{'Cylinders', 'Model_Year'}, 'Prune','off');
view(t, 'mode','graph')

y_hat = predict(t, x);
cm = confusionmat(y,y_hat);

tt = prune(t, 'Level',3);
view(tt)

predict(tt, [33 4 78 NaN])
